{
    "DevPort": 4000,
    "Api": {
        "Auth": {
            "getSess": {
                "Params": "{}",
                "Response": "{title:string, id: string}[]",
                "Program": [
                    "# $cRels => &UserRel.Find|mID=$UserID|rel=1",
                    " const { getBindingID } = ( await import('./binding-id') );",
                    "const result = cRels.map( ( r:UserRel ) => { return { id: getBindingID( $UserID, r.sID ), title: getBindingID( $UserID, r.sID ) }  } )",
                    "$Return = result"
                ]
            },
            "creSes": {
                "Params": "{toID: string}",
                "Response": "{ done: boolean, chatID: string }",
                "Program": [
                    "const toID = $Params.toID",
                    "# $toUser => &User.Find|userID=toID",
                    " if( !toUser ) { $Return = { done: false, chatID: '' } } ",
                    " else { ",
                    "# &UserRel.Insert|mID=$UserID|sID=toID|rel=1",
                    " const chatID = ( await import('./binding-id') ).getBindingID( toID, $UserID );",
                    "$Return = { done: true, chatID }",
                    "}"
                ]
            },
            "getMes": {
                "Params": "{chatID: string}",
                "Response": "{ isMe: boolean, content: string }[]",
                "Program": [
                    "const { chatID } = $Params",
                    "# $allMes => &Mes.Find|chatID=chatID|*date=A",
                    "const res = allMes.map( m => { const isMe = $UserID === m.senderID; return { content: m.content, isMe } } ) ",
                    "$Return = res"
                ]
            },
            "sendMes": {
                "Params": "{chatID: string, message: string, date: string}",
                "Response": "{ done: boolean }",
                "Program": [
                    "const { chatID, message:content,date } = $Params",
                    " const { pushMes } = await ( import('./mes-cache') ); ",
                    " const { resolveBindingID } = await( import('./binding-id') );  ",
                    " const pairIDs = resolveBindingID( chatID )   ",
                    " const toID = pairIDs[0] === $UserID ? pairIDs[1] : pairIDs[0] ",
                    " pushMes( chatID, toID, content ) ",
                    "# &Mes.Insert|chatID=chatID|date=date|content=content|id=GenID('mes')|senderID=$UserID",
                    "$Return = { done: true }"
                ]
            },

            "recvMes": {
                "Params": "{ chatID: string }",
                "Response": "{ isMe: boolean, content: string }[]",
                "Program": [
                    "const { chatID } = $Params",
                    "const { getMesAndClear } = await ( import('./mes-cache') )",
                    "$Return = getMesAndClear( chatID, $UserID ).map( m => { return { isMe: false, content: m } } ) "
                ]
            },
            "deleteUser": {
                "Params": "{userID: string}",
                "Response": "{done: boolean}",
                "Program": [
                    "# &User.Delete|userID=$Params.userID ",
                    " $Return = { done: true };"
                ]
            },
            "insertUser": {
                "Params": "{userID: string}",
                "Response": "{done: boolean}",
                "Program": [
                    "# &User.Insert|userID=$Params.userID ",
                    " $Return = { done: true };"
                ]
            }
        },
        "Unauth": {
            "login": {
                "Params": "{userID: string, pwd: string}",
                "Response": "{done: boolean}",
                "Program": [
                    "# $user => &User.FindOne|userID=$Params.userID ",
                    " $Return = { done: Boolean( user && user.pwd === $Params.pwd ) };"
                ]
            },
            "reg": {
                "Params": "{userID: string, pwd: string, userNick: string}",
                "Response": "{done: boolean}",
                "Program": [
                    "# $user => &User.FindOne|userID=$Params.userID ",
                    " if( !user ) {",
                    "# &User.Insert|userID=$Params.userID|userNick=$Params.userNick|pwd=$Params.pwd ",
                    " $Return = { done: true };",
                    "}",
                    "else {",
                    "$Return = { done: false }",
                    "}"
                ]
            }
        }
    }
}